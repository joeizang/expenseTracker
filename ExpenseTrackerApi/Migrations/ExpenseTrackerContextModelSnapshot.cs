// <auto-generated />
using System;
using ExpenseTrackerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpenseTrackerApi.Migrations
{
    [DbContext(typeof(ExpenseTrackerContext))]
    partial class ExpenseTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpenseTrackerApi.DomainModels.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("ExpenseTrackerApi.DomainModels.ExpenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseTypes", (string)null);
                });

            modelBuilder.Entity("ExpenseTrackerApi.DomainModels.Expense", b =>
                {
                    b.OwnsOne("ExpenseTrackerApi.DomainModels.Expense.Amount#ExpenseTrackerApi.DomainModels.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("ExpenseId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(12, 2)
                                .HasColumnType("numeric(12,2)");

                            b1.HasKey("ExpenseId");

                            b1.ToTable("Expenses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExpenseId");

                            b1.OwnsOne("ExpenseTrackerApi.DomainModels.Expense.Amount#ExpenseTrackerApi.DomainModels.ValueObjects.Money.Currency#ExpenseTrackerApi.DomainModels.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("MoneyExpenseId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasMaxLength(5)
                                        .HasColumnType("character varying(5)");

                                    b2.HasKey("MoneyExpenseId");

                                    b2.ToTable("Expenses", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyExpenseId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("ExpenseTrackerApi.DomainModels.ExpenseType", b =>
                {
                    b.HasOne("ExpenseTrackerApi.DomainModels.Expense", null)
                        .WithMany("ExpenseTypes")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ExpenseTrackerApi.DomainModels.Expense", b =>
                {
                    b.Navigation("ExpenseTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
